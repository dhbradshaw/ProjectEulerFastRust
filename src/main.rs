extern crate time;
use std::cmp::max;
use time::PreciseTime;

fn p1(bar: u64) -> u64 {
    /// If we list all the natural numbers below 10 that are multiples of 3 or 5,
    /// we get 3, 5, 6 and 9. The sum of these multiples is 23.
    /// Find the sum of all the multiples of 3 or 5 below 1000.");
    let mut n = 1;
    let mut agg = 0;
    loop {
        if n == bar {
            break;
        }
        if n % 3 == 0 || n % 5 == 0 {
            agg += n;
        }
        n += 1;
    }
    agg
}

#[test]
fn test_p1() {
    assert!(p1(10) == 23)
}

fn p1_iterate(bar: u64) -> u64 {
    (1..bar).filter(|n| n % 3 == 0 || n % 5 == 0).sum()
}

#[test]
fn test_p1_iterate() {
    assert!(p1_iterate(10) == 23)
}

fn p2() -> u64 {
    ///  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    ///  By starting with 1 and 2, the first 10 terms will be:
    ///      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    ///  By considering the terms in the Fibonacci sequence whose values do not exceed
    ///  four million, find the sum of the even-valued terms.
    let mut t1: u64 = 1;
    let mut t2: u64 = 2;
    let mut total: u64 = 0;
    while t2 <= 4000000 {
        if t2 % 2 == 0 {
            total += t2;
        }
        t2 = t1 + t2;
        t1 = t2 - t1;
    }
    total
}

struct Fibonacci {
	last: u64,
	curr: u64,
}

impl Iterator for Fibonacci {
    type Item = u64;
    fn next(&mut self) -> Option<u64> {
        self.curr = self.curr + self.last;
        self.last = self.curr - self.last;
        Some(self.curr)
    }
}

fn p2_iterative() -> u64 {
    let f = Fibonacci{last: 0, curr:1};
    let mut agg: u64 = 0;
    for n in f {
        if n % 2 == 0 {
            agg += n;
        }
        if n >= 4000000 {
            break;
        }
    }
    agg
}

fn p3(n: u64) -> u64 {
    /// The prime factors of 13195 are 5, 7, 13 and 29.
    /// What is the largest prime factor of the number 600851475143 ?
    let mut upper_limit = (n as f64).sqrt() as u64 + 1;
    let mut target = n;
    let mut factor = 2;
    while factor <= upper_limit {
        while target % factor == 0 {
            target = target / factor;
        }
        factor += 1;
        upper_limit = (target as f64).sqrt() as u64 + 1;
    }
    max(target, factor)
}

fn reverse_decimal_digits(n: u32) -> Vec<u32> {
    let mut cp = n;
    let mut digits = Vec::new();
    while cp > 0 {
        digits.push(cp % 10);
        cp = cp / 10;
    }
    digits
}

fn is_palindrome(s: &[u32]) -> bool {
    let l = s.len();
    for i in 0..l/2 {
        if s[i] != s[l - 1 - i] {
            return false
        }
    }
    true
}

fn p4() -> u32 {
    /// A palindromic number reads the same both ways.
    /// The largest palindrome made from the product of two 2-digit numbers is
    /// 9009 = 91 Ã— 99.
    /// Find the largest palindrome made from the product of two 3-digit numbers.
    let mut largest_palindrome = 0;
    let mut i = 999;
    while i > 99 {
        let mut j = i;
        while j > 99 {
            let multiple = i * j;
            if multiple > largest_palindrome {
                let digits = reverse_decimal_digits(multiple);
                if is_palindrome(&digits) {
                    largest_palindrome = multiple
                }
            } else {
                break;
            }
            j -= 1;
        }
        i -= 1;
    }
    largest_palindrome
}

fn p5() -> u64 {
    // What is the smallest positive number that is evenly divisible
    // by all of the numbers from 1 to 20?
    1 * 2 * 3 * 2 * 5 * 7 * 2 * 3 * 11 * 13 * 2 * 17 * 19
}

fn p6() -> u64 {
    let mut sum_of_squares = 0;
    let mut sum = 0;
    for i in 1..101 {
        sum += i;
        sum_of_squares += i * i;
    }
    sum * sum - sum_of_squares
}

fn is_prime(n: u64, primes: &[u64]) -> bool {
    for p in primes {
        if *p > ((n as f64).sqrt() as u64) {
            break;
        }
        if n % p == 0 {
            return false
        }
    }
    true
}

fn nth_prime(n: usize) -> u64 {
    let mut primes = Vec::new();
    primes.push(2);
    let mut test = 1;
    while primes.len() < n {
        test += 2;
        if is_prime(test, &primes) {
            primes.push(test);
        }
    }
    primes[primes.len()-1]
}

fn p7() -> u64 {
    let start = PreciseTime::now();
    let out = nth_prime(10001);
    let end = PreciseTime::now();
    println!("p7 time: {} seconds", start.to(end));
    out
}

fn main() {
    // println!("{}", p1(10));
    // println!("{}", p1_iterate(10));
    // println!("{}", p1(1000));
    // println!("{}", p1_iterate(1000));
    // println!("{}", p2());
    // println!("{}", p2_iterative());
    // println!("{}", p3(600851475143));
    // let start = PreciseTime::now();
    // println!("{:?}", p4());
    // let end = PreciseTime::now();
    // println!("{} seconds", start.to(end));
    // println!("{}", p5());
    // println!("{}", p6());
    println!("{}", p7());
}
