extern crate arrayvec;
extern crate chrono;
// extern crate eulerrust;
extern crate fnv;
extern crate num;
extern crate permutohedron;
extern crate time;

use std::cmp::max;
use std::collections::HashMap;
use std::collections::HashSet;
use std::fs::File;
use std::io::Read;

use self::chrono::{Datelike, NaiveDate, Weekday};
use self::fnv::FnvHashMap;
use self::num::{BigUint};
use self::permutohedron::heap_recursive;


use super::divisors::{divisor_count, gcd};
use super::fibonacci::Fibonacci;
use super::lexicographic;
use super::modofpower::mod_of_power;
use super::odddigits::next_odd_sans_five;
use super::palindrome::{BinaryPalindromes, reverse_digits};
use super::primes::{nonself_prime_factor_counts_200_000, is_prime, is_prime_no_memo, primes_below,
                    sieve_16000, sieve_150_000, sieve_1_000_000, sieve_2_000_000};
use super::trianglenumbers::is_triangular;

pub fn sum_multiples_under(bar: u32, base: u32) -> u32 {
    let mut agg = 0;
    let mut n = 0;
    loop {
        n += base;
        if n >= bar {
            break agg;
        }
        agg += n;
    }
}

#[allow(dead_code)]
pub fn p1() -> u32 {
    // If we list all the natural numbers below 10 that are multiples of 3 or 5,
    // we get 3, 5, 6 and 9. The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.");
    let bar = 1000;
    sum_multiples_under(bar, 3) + sum_multiples_under(bar, 5) - sum_multiples_under(bar, 15)
}

#[allow(dead_code)]
pub fn p2() -> u64 {
    //  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    //  By starting with 1 and 2, the first 10 terms will be:
    //      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //  By considering the terms in the Fibonacci sequence whose values do not exceed
    //  four million, find the sum of the even-valued terms.
    let mut t1: u64 = 1;
    let mut t2: u64 = 2;
    let mut total: u64 = 0;
    while t2 <= 4000000 {
        if t2 % 2 == 0 {
            total += t2;
        }
        t2 = t1 + t2;
        t1 = t2 - t1;
    }
    total
}

#[allow(dead_code)]
pub fn p2_iterative() -> u64 {
    let f = Fibonacci { last: 0, curr: 1 };
    let mut agg: u64 = 0;
    for n in f {
        if n % 2 == 0 {
            agg += n;
        }
        if n >= 4000000 {
            break;
        }
    }
    agg
}

#[allow(dead_code)]
pub fn p3() -> u64 {
    // The prime factors of 13195 are 5, 7, 13 and 29.
    // What is the largest prime factor of the number 600851475143 ?
    let n = 600851475143;
    let mut upper_limit = (n as f64).sqrt() as u64 + 1;
    let mut target = n;
    let mut factor = 2;
    while factor <= upper_limit {
        while target % factor == 0 {
            target = target / factor;
        }
        factor += 1;
        upper_limit = (target as f64).sqrt() as u64 + 1;
    }
    max(target, factor)
}

#[allow(dead_code)]
fn even_digit_palindrome_from_n(n: u16) -> u32 {
    let mut p = n as u32;
    let mut nc = n;
    while nc > 0 {
        p *= 10;
        p += (nc % 10) as u32;
        nc /= 10;
    }
    p
}

#[allow(dead_code)]
pub fn p4() -> u32 {
    // A palindromic number reads the same both ways.
    // The largest palindrome made from the product of two 2-digit numbers is
    // 9009 = 91 × 99.
    // Find the largest palindrome made from the product of two 3-digit numbers.
    let mut i: u16 = 999;
    loop {
        let p = even_digit_palindrome_from_n(i);
        let mut j = 999;
        while j * j >= p {
            if p % j == 0 {
                return p;
            }
            j -= 1;
        }
        i -= 1;
    }
}

#[allow(dead_code)]
pub fn p5() -> u64 {
    // What is the smallest positive number that is evenly divisible
    // by all of the numbers from 1 to 20?
    1 * 2 * 3 * 2 * 5 * 7 * 2 * 3 * 11 * 13 * 2 * 17 * 19
}

#[allow(dead_code)]
pub fn p6() -> u64 {
    let mut sum_of_squares = 0;
    let mut sum = 0;
    for i in 1..101 {
        sum += i;
        sum_of_squares += i * i;
    }
    sum * sum - sum_of_squares
}

pub fn p7() -> u32 {
    let is_prime = sieve_150_000();
    let length = is_prime.len();

    let mut count = 1;
    let mut i = 3;
    while i <= length {
        if is_prime[i] {
            count += 1;
            if count == 10001 {
                return i as u32;
            }
        }
        i += 2;
    }
    0
}

#[allow(dead_code)]
pub fn p8() -> u64 {
    let n = 13;
    let s = "73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450";
    let v = s.chars()
        .filter_map(|a| a.to_digit(10))
        .collect::<Vec<u32>>();
    let l = v.len();

    let mut largest = 0;
    let mut i = 0;
    while (i + n) < l {
        let candidate = (i..(i + n)).fold(1, |multiple, index| multiple * (v[index]) as u64);
        largest = max(largest, candidate);
        i += 1;
    }
    largest
}

#[allow(dead_code)]
pub fn p9() -> u64 {
    for a in 1..300 {
        let b_numerator = 500000 - 1000 * a;
        let b_denominator = 1000 - a;
        if b_numerator % b_denominator == 0 {
            let b = b_numerator / b_denominator;
            let c = 1000 - a - b;
            return (a * b * c) as u64;
        }
    }
    1
}

#[allow(dead_code)]
pub fn p10() -> u64 {
    let is_prime = sieve_2_000_000();
    let mut s = 2;
    let mut i = 3;
    while i < 2_000_000 {
        if is_prime[i] {
            s += i;
        }
        i += 2;
    }
    s as u64
}

fn greatest_multiple(v: Vec<u64>, n: usize) -> u64 {
    let l = v.len();
    let mut start = 0;
    let mut largest = 0;
    while (start + n) <= l {
        let multiple = &v[start..start + n].iter().fold(1, |multiple, e| {
            multiple * (*e) as u64
        });
        largest = max(largest, *multiple);
        start += 1;
    }
    largest
}

#[allow(dead_code)]
pub fn p11() -> u64 {
    // What is the greatest product of four adjacent numbers in the same direction
    // (up, down, left, right, or diagonally) in the 20×20 grid?
    let s = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";
    let matrix: Vec<Vec<u64>> = s.lines()
        .map(|line| {
            line.split_whitespace()
                .map(|digits| digits.parse::<u64>().unwrap())
                .collect()
        })
        .collect();

    let order = matrix.len();
    let am = super::matrix::AbstractMatrix::new(order);

    let mut winner = 0;
    let mut vecs = am.rows();
    vecs.extend(am.columns());
    vecs.extend(am.climbs());
    vecs.extend(am.descends());
    for row in vecs {
        let nums: Vec<u64> = row.iter()
            .map(|p| {
                let &(i, j) = p;
                matrix[i][j]
            })
            .collect();
        winner = max(greatest_multiple(nums, 4), winner);
    }
    winner
}

#[allow(dead_code)]
pub fn p12() -> u64 {
    // What is the value of the first triangle number to have over five hundred divisors?
    let mut n = 1;
    let mut p;
    loop {
        // Numbers with lots of divisors for their size are divisible by 6.
        let t = n * (n + 1) / 2;
        if t % 6 == 0 {
            if n % 2 == 0 {
                p = divisor_count(n / 2) * divisor_count(n + 1);
            } else {
                p = divisor_count(n) * divisor_count((n + 1) / 2);
            }
            if p > 500 {
                break (n * (n + 1)) / 2;
            }
        }
        n += 1;
    }
}

const P13_INPUT: &'static str = r"37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690";

#[allow(dead_code)]
pub fn p13() -> u64 {
    // Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    let mut total: u64 = P13_INPUT
        .lines()
        .map(|line| &line[..11])
        .filter_map(|line| line.parse::<u64>().ok())
        .sum();
    while total >= 10_000_000_000 {
        total /= 10;
    }
    total
}

#[allow(dead_code)]
pub fn p14() -> u32 {
    super::collatz::longest_collatz_memo(999_999)
}

#[allow(dead_code)]
pub fn p15() -> u64 {
    super::lattice::corner_to_corner_fast(20)
}

#[allow(dead_code)]
pub fn p16() -> u32 {
    num::pow(BigUint::new(vec![2]), 1000)
        .to_str_radix(10)
        .chars()
        .map(|c| c.to_digit(10).unwrap())
        .sum()
}

#[allow(dead_code)]
pub fn p17() -> u32 {
    let mut total = 0;
    for i in 1..1001 {
        total += super::numberletters::letter_count_under_1001(i);
    }
    total
}

#[allow(dead_code)]
pub fn p18() -> u32 {
    let triangle: Vec<Vec<u32>> =
        vec![
            vec![04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23],
            vec![63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
            vec![91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
            vec![70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
            vec![53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
            vec![41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
            vec![41, 41, 26, 56, 83, 40, 80, 70, 33],
            vec![99, 65, 04, 28, 06, 16, 70, 92],
            vec![88, 02, 77, 73, 07, 63, 67],
            vec![19, 01, 23, 75, 03, 34],
            vec![20, 04, 82, 47, 65],
            vec![18, 35, 87, 10],
            vec![17, 47, 82],
            vec![95, 64],
            vec![75],
        ];
    let mut agg = (&triangle[0]).to_vec();
    for i in 0..(triangle.len() - 1) {
        agg = super::maxpathsum::highest_values(&triangle[i + 1], &agg);
    }
    agg[0]
}

#[allow(dead_code)]
pub fn p19() -> u32 {
    let mut count = 0;
    for year in 1901..2001 {
        for month in 1..13 {
            if NaiveDate::from_ymd(year, month, 1).weekday() == Weekday::Sun {
                count += 1;
            }
        }
    }
    count
}

#[allow(dead_code)]
pub fn p20() -> u32 {
    let mut agg = BigUint::from(1 as u32);
    for i in 1..101 {
        agg = agg * BigUint::from(i as u32)
    }
    agg.to_str_radix(10)
        .chars()
        .map(|a| a.to_digit(10).unwrap())
        .sum()
}

#[allow(dead_code)]
pub fn p21() -> u32 {
    let mut divisor_sums = [1u32; 30000];
    for i in 2..30000 / 2 {
        let mut j = 2;
        while i * j < 30000 {
            divisor_sums[i * j] += i as u32;
            j += 1;
        }
    }
    divisor_sums[0] = 0;
    (1..10000)
        .filter(|n| {
            let partner = divisor_sums[*n as usize];
            *n != partner && *n == divisor_sums[partner as usize]
        })
        .sum()
}

#[allow(dead_code)]
pub fn p22() -> u32 {
    // Read in the file
    let mut file = File::open("p022_names.txt").unwrap();
    let mut names = String::new();
    file.read_to_string(&mut names).unwrap();

    // Convert names to vectors of integers and sort
    let mut names: Vec<_> = names.split(",").collect();
    names.sort();

    // Total scores
    let zero = 'A' as u32 - 1;
    let mut sum = 0;
    for (i, name) in names.iter().enumerate() {
        let place: u32 = i as u32 + 1;
        let score: u32 = name.chars()
            .filter(|c| c.is_alphabetic())
            .map(|c| c as u32 - zero)
            .sum();
        sum += place * score;
    }
    sum
}

#[allow(dead_code)]
pub fn p23() -> u32 {
    // Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
    let mut divisor_sums = [1u32; 28124];
    for i in 2..28124 / 2 {
        let mut j = 2;
        while i * j < 28124 {
            divisor_sums[i * j] += i as u32;
            j += 1;
        }
    }
    divisor_sums[0] = 0;
    let mut is_abundant = [false; 28124];
    let mut abundants = Vec::new();
    for (i, s) in divisor_sums.iter().enumerate() {
        if *s > i as u32 {
            is_abundant[i] = true;
            abundants.push(i);
        }
    }

    let mut total = 0;
    for n in 1..28124 {
        let too_high = n / 2 + 1;
        let mut is_abundant_sum = false;
        for abundant in &abundants {
            if *abundant >= too_high {
                break;
            }
            let partner = n - *abundant;
            if is_abundant[partner as usize] {
                is_abundant_sum = true;
                break;
            }
        }
        if !is_abundant_sum {
            total += n;
        }
    }
    total as u32
}

#[allow(dead_code)]
pub fn p24() -> u32 {
    lexicographic::nth_term(1_000_000)
}


#[allow(dead_code)]
pub fn p25() -> u32 {
    // f(n) = (phi ^ n) / sqrt(5)
    // => log(f(n)) = log((phi ^ n)/(sqrt(5)))
    let r5 = 5f64.sqrt();
    let phi = (1f64 + r5) / 2f64;
    let close = (999f64 + r5.log(10f64)) / phi.log(10f64);
    close.ceil() as u32
}

#[allow(dead_code)]
fn cycle_size(den: usize) -> usize {
    let mut num: usize = 1;
    let mut map = HashMap::new();
    let mut index: usize = 0;
    let mut last_index: usize;
    loop {
        num = (num % den) * 10;
        last_index = *map.entry(num).or_insert(index);
        if index != last_index {
            break index - last_index;
        }
        index += 1;
    }
}

#[allow(dead_code)]
fn cycle_size_fnv(den: usize) -> usize {
    let mut num: usize = 1;
    let mut map = FnvHashMap::default();
    let mut index: usize = 0;
    let mut last_index: usize;
    loop {
        num = (num % den) * 10;
        last_index = *map.entry(num).or_insert(index);
        if index != last_index {
            break index - last_index;
        }
        index += 1;
    }
}

#[allow(dead_code)]
fn cycle_size_array(den: usize) -> usize {
    let mut num: usize = 1;
    let mut a = [0; 1000];
    let mut index: usize = 0;
    let mut last_index: usize;
    loop {
        num %= den;
        last_index = a[num];
        if last_index != 0 {
            break index - last_index;
        }
        a[num] = index;
        num *= 10;
        index += 1;
    }
}

#[allow(dead_code)]
pub fn p26() -> usize {
    // Of all the denominators below 1000, which has the longest repeating cycle?
    let mut max_length: usize = 0;
    let mut den_max: usize = 0;
    let mut den = 999;
    while max_length < den {
        let size = cycle_size_array(den);
        if size > max_length {
            max_length = size;
            den_max = den;
        }
        den -= 2;
    }
    den_max
}


#[allow(dead_code)]
pub fn p27() -> i32 {
    let mut b: i32 = 2;
    let mut max_count = 0;
    let mut ab_max = 0;
    let primes = sieve_16000();
    while b < 1001 {
        // loop through b
        if primes[b as usize] {
            let mut a: i32 = -999;
            while a < 1000 {
                // loop through a
                let mut n = 0;
                loop {
                    // loop through n
                    let quad = n * n + a * n + b;
                    if quad > 1 && primes[quad as usize] {
                        n += 1;
                    } else {
                        break;
                    }
                }
                if n > max_count {
                    ab_max = a * b;
                    max_count = n;
                }
                a += 2
            }
        }
        b += 1;
    }
    ab_max
}

#[allow(dead_code)]
pub fn p28() -> u64 {
    let bound = 1001;
    let mut agg = 1;
    let mut top_right = 1;
    let mut order = 3;
    loop {
        let last_top_right = top_right;
        top_right = order * order;
        let bottom_left = (top_right + last_top_right) / 2;
        agg += top_right + 3 * bottom_left;
        order += 2;
        if order > bound {
            break agg;
        }
    }
}

#[allow(dead_code)]
pub fn prime_representation(n: u16) -> [u16; 25] {
    assert!(n < 101);
    let primes = [
        2,
        3,
        5,
        7,
        11,
        13,
        17,
        19,
        23,
        29,
        31,
        37,
        41,
        43,
        47,
        53,
        59,
        61,
        67,
        71,
        73,
        79,
        83,
        89,
        97,
    ];
    let mut representation = [0; 25];
    let mut nc = n;
    let mut i = 0;
    while nc > 1 && i < 25 {
        let p = primes[i];
        while nc % p == 0 {
            representation[i] += 1;
            nc /= p as u16;
        }
        i += 1
    }
    representation
}

#[allow(dead_code)]
pub fn prime_representation_power(representation: &[u16; 25], power: u16) -> [u16; 25] {
    let mut new_representation = [0; 25];
    for (i, &n) in representation.iter().enumerate() {
        if n > 0 {
            new_representation[i] = n * power;
        }
    }
    new_representation
}

#[allow(dead_code)]
pub fn p29() -> usize {
    let mut s = HashSet::with_capacity(10_000);
    for n in 2..101 {
        let representation = prime_representation(n);
        for power in 2..101 {
            s.insert(prime_representation_power(&representation, power));
        }
    }
    s.len()
}

#[allow(dead_code)]
fn digit_5th_power_sum(n: u32) -> u32 {
    let mut agg = 0;
    let mut n = n;
    while n > 0 {
        let last_digit = n % 10;
        agg += match last_digit {
            0 => 0,
            1 => 1,
            2 => 32,
            3 => 243,
            4 => 1024,
            5 => 3125,
            6 => 7776,
            7 => 16807,
            8 => 32768,
            9 => 59049,
            _ => 0,
        };
        n /= 10;
    }
    agg
}

struct UphillNumber {
    // A number whose digits are ordered so that they never decrease as you travel from left to right.
    digits: [u8; 6],
}

impl UphillNumber {
    fn new() -> UphillNumber {
        UphillNumber { digits: [0u8; 6] }
    }
    fn to_u32(&self) -> u32 {
        let mut n = 0;
        for d in self.digits.iter() {
            n *= 10;
            n += *d as u32;
        }
        n
    }
}

impl Iterator for UphillNumber {
    type Item = u32;
    fn next(&mut self) -> Option<u32> {
        if self.digits[5] < 9u8 {
            self.digits[5] += 1;
        } else {
            let mut n = self.to_u32() + 1;
            if n > 999_999 {
                return None;
            }
            let mut index = 5;
            while n > 0 {
                let last = n % 10;
                n /= 10;
                if index < 6 {
                    self.digits[index] = last as u8;
                }
                index -= 1;
            }
            for i in 0..5 {
                let second = i + 1;
                if self.digits[second] < self.digits[i] {
                    self.digits[second] = self.digits[i];
                }
            }
        }
        Some(self.to_u32())
    }
}

#[allow(dead_code)]
pub fn p30() -> u32 {
    let mut un = UphillNumber::new();
    un.next(); // since 1 is not included in the sum
    let mut sum = 0;
    for n in un {
        let dps = digit_5th_power_sum(n);
        if digit_5th_power_sum(dps) == dps {
            sum += dps;
        }
        if n > 300_000 {
            break;
        }
    }
    sum
}


#[allow(dead_code)]
fn coin_choices(amount: u32, type_count: usize) -> u32 {
    let coins = [1, 2, 5, 10, 20, 50, 100, 200];
    match type_count {
        1 => 1,
        2...8 => {
            let largest_coin = coins[type_count - 1];
            let max_n = amount / largest_coin;
            let choices = 0..(max_n + 1);
            choices
                .map(|n| coin_choices(amount - n * largest_coin, type_count - 1))
                .sum()
        }
        _ => 0,
    }
}

#[allow(dead_code)]
pub fn p31() -> u32 {
    coin_choices(200, 8)
}

#[allow(dead_code)]
fn no_repeats(n: usize, digits: &mut [bool]) -> bool {
    let mut pan = true;
    let mut nc = n;
    while nc > 0 {
        let d = nc % 10;
        if digits[d] {
            pan = false;
            break;
        } else {
            digits[d] = true;
        }
        nc = nc / 10;
    }
    pan
}


#[allow(dead_code)]
pub fn p32() -> u32 {
    // The following C code by Tabookie gets 0.4 ms:
    // #include <stdio.h>
    // #include <stdlib.h>
    // #include <math.h>
    //
    // int isPand(int n){//assume 9-digit
    // 	int digits[10] = {0};
    // 	for(int i=0;i<9;i++){
    // 		int temp = n%10;
    // 		if(digits[temp]||temp==0)return 0;
    // 		digits[temp] = 1;
    // 		n/=10;
    // 	}
    // 	return 1;
    //
    // }


    // int main(void){
    //
    // 	_Bool state[10000] = {0};
    //
    // 	for(int a = 10;a<100;a++){
    // 		for(int b = 99 + a%3 ;b<1000;b+=3){
    // 			if(b<100)continue;
    // 			int prod = a * b;
    // 			if(prod>9999)break;
    // 			if(prod<1000||prod%3!=a%3)continue;
    // 			if(isPand(a*10000000+b*10000+prod))state[prod] = 1;
    // 		}
    // 	}
    // 	for(int a = 1;a<10;a++){
    // 		for(int b = 999 + a%3 ;b<10000;b+=3){
    // 			if(b<1000)continue;
    // 			int prod = a * b;
    // 			if(prod>9999)break;
    // 			if(prod<1000||prod%3!=a%3)continue;
    // 			if(isPand(a*100000000+b*10000+prod))state[prod] = 1;
    // 		}
    // 	}
    // 	int sum = 0;
    // 	for(int i=1000;i<10000;i++){
    // 		if(state[i]==1)sum+=i;
    // 	}
    // 	printf("%d",sum);
    //
    // 	return 0;
    // }



    let mut pandigital_products = HashSet::new();
    let mut sum = 0;

    // One of the multipliers has to be less than 100.
    for i in 1..100 {

        // Avoid repeats by enforcing that j > i.
        // Upper bound on j can be big because we'll break when p is large.
        for j in i..10000 {
            let mut digits = [false; 10];
            let mut pan = no_repeats(i as usize, &mut digits);
            if !pan {
                break;
            }
            pan = no_repeats(j as usize, &mut digits);
            let p = i * j;
            if pan {
                if no_repeats(p as usize, &mut digits) {

                    // Check that all nine digits are used
                    for i in 1..10 {
                        if !digits[i] {
                            pan = false;
                            break;
                        }
                    }

                    // Add any new products to the set and sum.
                    if pan {
                        if !pandigital_products.contains(&p) {
                            pandigital_products.insert(p);
                            sum += p;
                        }
                    }
                }
            }
            if p > 9876 {
                break;
            }
        }
    }
    sum
}

#[allow(dead_code)]
pub fn p33() -> usize {
    let mut num_product = 1;
    let mut den_product = 1;
    for n in 1..10 {
        for d in (n + 1)..10 {
            let f = n as f32 / d as f32;
            for extra in 1..10 {
                if extra > n || (extra == n && d > extra) {
                    let na = n * 10 + extra;
                    let da = extra * 10 + d;
                    let ff = na as f32 / da as f32;
                    if ff == f {
                        num_product *= n;
                        den_product *= d;
                    }
                }
                if d > extra || (extra == d && extra > n) {
                    let nb = extra * 10 + n;
                    let db = d * 10 + extra;
                    let ff = nb as f32 / db as f32;
                    if ff == f {
                        num_product *= n;
                        den_product *= d;
                    }
                }
            }
        }
    }
    for &i in [2, 3, 5, 7].iter() {
        while den_product % i == 0 && num_product % i == 0 {
            den_product /= i;
            num_product /= i;
        }
    }
    den_product
}

#[allow(dead_code)]
fn sum_digit_factorial(n: u32) -> u32 {
    let mut nc = n;
    let mut sum = 0;
    while nc > 0 {
        let last = nc % 10;
        nc = nc / 10;
        sum += match last {
            0 => 1,
            1 => 1,
            2 => 2,
            3 => 6,
            4 => 24,
            5 => 120,
            6 => 720,
            7 => 5040,
            8 => 40320,
            9 => 362880,
            _ => 0,
        };
    }
    sum
}

#[allow(dead_code)]
pub fn p34() -> u32 {
    let mut un1 = UphillNumber::new();

    // Start at 11 since we skip the first 10 according to problem definition.
    un1.digits[4] = 1u8;
    un1.digits[5] = 1u8;

    let mut sum = 0;
    for n in un1 {
        let s = sum_digit_factorial(n);
        let ss = sum_digit_factorial(s);
        if s == ss && s >= n {
            sum += s
        }
    }
    let mut un2 = UphillNumber::new();
    un2.digits = [1u8; 6];
    for n in un2 {
        let s = sum_digit_factorial(n + 1_000_000);
        let ss = sum_digit_factorial(s);
        if s == ss && s >= n {
            sum += s;
        }
        if n >= 1_572_480 {
            break;
        }
    }
    sum
}

#[allow(dead_code)]
fn check_rotations(n: usize, is_prime: &[bool; 1_000_000]) -> bool {
    // Encode digits into array.
    let mut nc = n;
    let mut digits = [0; 6];
    let l = digits.len();
    let mut index = l - 1;
    let mut digit_count = 0;
    while nc > 0 {
        digits[index] = nc % 10;
        nc /= 10;
        if index > 0 {
            index -= 1;
        } else {
            digit_count = 1;
        }
    }

    digit_count += l - 1 - index;
    let first = l - digit_count;
    for r in 0..(digit_count + 10) {
        // Decode rotated number from array.
        let mut rotated = 0;
        for d in 0..digit_count {
            rotated *= 10;
            rotated += digits[first + ((r + d) % digit_count)];
        }

        // Make the check.
        if !is_prime[rotated] {
            return false;
        }
    }
    true
}

#[allow(dead_code)]
pub fn p35() -> usize {
    let mut n = 111;
    let mut circular_prime_count = 13; // Problem states that there are 13 below 100.
    let is_prime = sieve_1_000_000();
    loop {
        if is_prime[n] && check_rotations(n, &is_prime) {
            circular_prime_count += 1;
        }
        n = next_odd_sans_five(n as u32) as usize;
        if n >= 1_000_000 {
            break circular_prime_count;
        }
    }
}

#[allow(dead_code)]
pub fn p36() -> u64 {
    let mut sum = 0;
    let bps = BinaryPalindromes::new();
    for bp in bps {
        if bp >= 1_000_000 {
            break;
        }
        if bp == reverse_digits(bp, 10) {
            sum += bp;
        }
    }
    sum
}

#[allow(dead_code)]
fn add_right(v: &Vec<u64>) -> Vec<u64> {
    let digits: [u64; 4] = [1, 3, 7, 9];
    let mut w = Vec::new();
    for branch in v {
        for d in digits.iter() {
            let candidate = branch * 10 + d;
            if is_prime_no_memo(candidate) {
                w.push(candidate)
            }
        }
    }
    w
}

#[allow(dead_code)]
fn left_truncate(n: u64) -> u64 {
    let zeroes = (n as f32).log(10f32) as u32;
    n % 10u64.pow(zeroes)
}

#[allow(dead_code)]
fn left_truncatable(n: u64) -> bool {
    // Assumes that the number has already been tested to be prime itself.
    let mut nc = left_truncate(n);
    while nc > 0 {
        if !is_prime_no_memo(nc) {
            return false;
        }
        nc = left_truncate(nc)
    }
    true
}

#[allow(dead_code)]
pub fn p37() -> u64 {
    // Strategy: generate right-truncatable primes by adding digits to the right side of primes and
    // seeing if the result is a prime.
    // Test each right-truncatable prime to see if it is also left-truncatable.
    // If it is, add it to the sum.
    let mut sum = 0;
    let mut branches: Vec<u64> = vec![2, 3, 5, 7];
    branches = add_right(&branches);
    while branches.len() > 0 {
        for b in &branches {
            if left_truncatable(*b) {
                sum += *b;
            }
        }
        branches = add_right(&branches);
    }
    sum
}

#[allow(dead_code)]
pub fn places(n: u64) -> u32 {
    (n as f64).log(10f64) as u32 + 1
}

#[allow(dead_code)]
pub fn pan_ok(n: u64) -> bool {
    let mut digits = [false; 10];
    digits[0] = true;
    no_repeats(n as usize, &mut digits)
}

#[allow(dead_code)]
pub fn pandigital_multiple(n: u64) -> u64 {
    let mut n = n;
    let mut m = 2;
    while places(n) < 9 {
        let next_multiple = m * n;
        n *= 10u64.pow(places(next_multiple));
        n += next_multiple;
        m += 1;
    }
    if places(n) > 10 {
        return 0;
    }

    match pan_ok(n) {
        true => n,
        _ => 0,
    }
}

#[allow(dead_code)]
pub fn p38() -> u64 {
    let digits: [u64; 9] = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    let c1 = 9;
    let mut highest = 0;
    for d in &digits {
        let c2 = 10 * c1 + d;
        let m = pandigital_multiple(c2);
        if m > highest {
            highest = m;
        }
        if pan_ok(c2) {
            for d in &digits {
                let c3 = 10 * c2 + d;
                let m = pandigital_multiple(c3);
                if m > highest {
                    highest = m;
                }
                if pan_ok(c3) {
                    for d in &digits {
                        let c4 = 10 * c3 + d;
                        let m = pandigital_multiple(c4);
                        if m > highest {
                            highest = m;
                        }
                    }
                }
            }

        }
    }
    highest
}

pub fn p39() -> u16 {
    let mut solution_count = [0u16; 1001];
    let mut m = 2;
    loop {
        let m_squared = m * m;
        let mut n = 1 + m % 2; // If m is even, n should be odd and vice verse.
        let mut n_squared = n * n;
        if m_squared + n_squared >= 500 {
            break;
        }
        while n < m {
            // Find triplet
            let a = m_squared - n_squared;
            let b = 2 * m * n;
            let c = m_squared + n_squared;

            // Mark triplet and multiples as solutions.
            let p = a + b + c;
            if p >= 1000 {
                break;
            }
            if gcd(a, b) == 1 {
                // Avoid overcounting due non-primitive triples.
                let mut k = 1;
                while k * p <= 1000 {
                    solution_count[k * p] += 1;
                    k += 1;
                }
            }

            // Keep one odd and one even.
            n += 2;
            n_squared = n * n;
        }
        m += 1;
    }

    let mut max_index = 0;
    let mut max_count = 0;
    for (i, count) in solution_count.iter().enumerate() {
        if *count > max_count {
            max_count = *count;
            max_index = i;
        }
    }
    max_index as u16
}

#[allow(dead_code)]
pub fn p40() -> u32 {
    let digits = [1, 10, 100, 1000, 10000, 100000, 1000000];
    let mut product = 1;
    for d in &digits {
        product *= super::champerownes::champerownes_digit(*d);
    }
    product
}

#[allow(dead_code)]
pub fn p41() -> u64 {
    let a = [7, 6, 5, 4, 3, 2, 1];
    let primes = primes_below(2767);
    let mut t = lexicographic::last(&a).unwrap();
    loop {
        t = lexicographic::last(&t).unwrap();
        let mut n = 0;
        for d in t.iter() {
            n *= 10;
            n += *d as u64;
        }
        if is_prime(n, &primes) {
            break n;
        }
    }
}

#[allow(dead_code)]
fn word_score(s: &str, zero: u32) -> u32 {
    s.chars()
        .filter(|c| c.is_alphabetic())
        .map(|c| c as u32 - zero)
        .sum()
}

#[allow(dead_code)]
fn read_to_string(filename: &str) -> String {
    let mut file = File::open(filename).unwrap();
    let mut data_string = String::new();
    file.read_to_string(&mut data_string).unwrap();
    data_string
}

#[allow(dead_code)]
pub fn p42() -> u64 {
    let data_string = read_to_string("p042_words.txt");
    let zero = 'A' as u32 - 1;
    let mut count = 0;

    // Up to 38 letters if all are Z or 70 letters for a less extreme case.
    let mut is_triangular = [false; 1000];
    let mut t: usize = 1;
    let mut diff: usize = 2;
    while t < 1000 {
        is_triangular[t] = true;
        t += diff;
        diff += 1;
    }

    for name in data_string.split(",") {
        let n = word_score(&name, zero);
        if is_triangular[n as usize] {
            count += 1;
        }
    }
    count
}

#[derive(Debug)]
struct Pandigital {
    last_empty: usize,
    number: [u8; 10],
    taken: [bool; 10],
}

impl Pandigital {
    fn new() -> Pandigital {
        Pandigital {
            last_empty: 9,
            number: [0; 10],
            taken: [false; 10],
        }
    }
    fn from_three_digits(n: u16) -> Option<Pandigital> {
        let mut pandigital = Pandigital::new();
        let mut nc = n;
        while nc > 0 {
            let next = nc % 10;
            match pandigital.taken[next as usize] {
                true => return None,
                false => {
                    pandigital.taken[next as usize] = true;
                    pandigital.number[pandigital.last_empty] = next as u8;
                    pandigital.last_empty -= 1;
                }
            }
            nc /= 10;
        }
        if n < 100 {
            pandigital.taken[0] = true;
            pandigital.last_empty -= 1;
        }
        Some(pandigital)
    }
    fn to_u64(&self) -> u64 {
        let mut n: u64 = 0;
        for i in (self.last_empty + 1)..10 {
            n *= 10;
            n += self.number[i] as u64;
        }
        n
    }
    fn clone(&self) -> Pandigital {
        Pandigital {
            last_empty: self.last_empty,
            number: self.number.clone(),
            taken: self.taken.clone(),
        }
    }
    fn add_digit(&self, digit: u8) -> Option<Pandigital> {
        if self.taken[digit as usize] {
            return None;
        } else {
            let mut c = self.clone();
            c.taken[digit as usize] = true;
            c.number[c.last_empty] = digit;
            c.last_empty -= 1;
            Some(c)
        }
    }
    fn branch(&self, prime: u32) -> Vec<Pandigital> {
        let mut branches = Vec::new();
        let last = self.number[self.last_empty + 2];
        if prime == 5 {
            if !(last == 0 || last == 5) {
                return branches;
            }
        }
        let rest = (self.number[self.last_empty + 1] * 10 + last) as u32;
        for (d, b) in self.taken.iter().enumerate() {
            if !*b {
                if ((d as u32) * 100 + rest) % prime == 0 {
                    branches.push(self.add_digit(d as u8).unwrap())
                }
            }
        }
        branches
    }
}

pub fn p43() -> u64 {
    let p = 17;
    let mut n = p;
    let mut solutions = Vec::new();
    while n <= 999 {
        match Pandigital::from_three_digits(n) {
            Some(pandigital) => solutions.push(pandigital),
            None => {}
        }
        n += p;
    }
    let primes = [13, 11, 7, 5, 3, 2, 1];
    for prime in primes.iter() {
        solutions = solutions.iter().flat_map(|p| p.branch(*prime)).collect();
    }
    solutions.iter().map(|pandigital| pandigital.to_u64()).sum()
}

#[allow(dead_code)]
pub fn p44() -> u64 {
    let mut i = 0;
    let mut diff = 0;
    loop {
        diff += 3 * i + 1;
        i += 1;

        let mut p = 0;
        for d in 1..i {
            p += 3 * d - 2;
            let num = diff - p;
            let den = 3 * d;
            let j = num / den;
            let r = num % den;
            if r == 0 {
                let rad = ((1 + 24 * (j * (3 * j - 1) + diff)) as f64).sqrt();
                if (1f64 + rad) % 6f64 == 0f64 {
                    return diff;
                }
            }
        }
    }
}

#[allow(dead_code)]
pub fn p45() -> u64 {
    let mut hex = 1;
    let mut pent = 1;
    let mut hex_diff = 5;
    let mut pent_diff = 4;
    let mut count = 0;
    loop {
        hex += hex_diff;
        while pent < hex {
            pent += pent_diff;
            pent_diff += 3;
        }
        if pent == hex && is_triangular(hex as u64) {
            if count == 1 {
                break hex;
            }
            count += 1;
        }
        hex_diff += 4
    }
}

#[allow(dead_code)]
pub fn p46() -> usize {
    // Get quick prime checker
    let is_prime = sieve_16000();

    // Now just check each composite
    let mut c = 3;
    loop {
        if !is_prime[c] {
            let mut backs_goldbach = false;
            let mut n = 1;
            let mut a = 2 * n * n;
            while a <= c - 2 {
                if is_prime[c - a] {
                    backs_goldbach = true;
                    break;
                }
                n += 1;
                a = 2 * n * n;
            }
            if !backs_goldbach {
                break c;
            }
        }
        c += 2;
    }
}

#[allow(dead_code)]
pub fn p47() -> u64 {
    let counts = nonself_prime_factor_counts_200_000();
    let target_count = 4u8;

    // Four primes each = 16 prime factors ... 2 could have 2, 2 could have three.  All others must be distinct, so 14.
    // 2 3 5 7  9 11 13 17  19 23 29 31  37 41
    let mut i: u64 = 2 * 3 * 5 * 41;
    loop {
        // Look forward to the end to avoid extra checks.
        let mut skip = 0;
        let last = i + (target_count as u64) - 1;
        for d in 0..4 {
            let index = last - d;
            if counts[index as usize] != target_count {
                skip = index - i + 1;
                break;
            }
        }
        if skip > 0 {
            i += skip;
            continue;
        } else {
            break i;
        }
    }
}

#[allow(dead_code)]
pub fn p48() -> u64 {
    let mut agg = 0;
    for n in 1..1001 {
        agg += mod_of_power(n, n, 10_000_000_000);
    }
    agg % 10_000_000_000
}

#[allow(dead_code)]
pub fn p49() -> usize {
    let is_prime = sieve_16000();
    let mut data = [0, 0, 0, 0];
    let mut i: usize = 9_999;
    while i > 999 {
        if is_prime[i] {
            // Package number into array for permutation exploration
            let mut ic = i;
            data[3] = ic % 10;
            ic /= 10;
            data[2] = ic % 10;
            ic /= 10;
            data[1] = ic % 10;
            ic /= 10;
            data[0] = ic;

            if data[0] == 0 || data[1] == 0 || data[2] == 0 || data[3] == 0 {
                i -= 1;
                continue;
            }

            // Get all prime permutations of number
            let mut prime_permutations = HashSet::new();
            heap_recursive(&mut data, |perm| {
                // Unpackage array into number
                let mut n = perm[0];
                n *= 10;
                n += perm[1];
                n *= 10;
                n += perm[2];
                n *= 10;
                n += perm[3];

                if is_prime[n] {
                    prime_permutations.insert(n);
                }
            });

            // Look for a sequence
            for p1 in prime_permutations.iter() {
                let mut diffs: HashMap<usize, usize> = HashMap::new();
                for p2 in prime_permutations.iter() {
                    let diff = if p2 > p1 { p2 - p1 } else { p1 - p2 };
                    if diffs.contains_key(&diff) {
                        // We have a sequence!
                        let first = p1 - diff;
                        if first != 1487 {
                            let second = p1;
                            let third = p1 + diff;
                            let sequence = first * 100_000_000 + second * 10_000 + third;
                            return sequence;
                        }
                    } else {
                        diffs.insert(diff, *p2);
                    }
                }
            }
        }
        i -= 1;
    }
    1
}


#[allow(dead_code)]
pub fn p50() -> u32 {
    // Get fast prime check
    let is_prime = sieve_1_000_000();

    // Get fast prime source.  While you do that, get a sequence sum.
    let mut primes = [0u32; 15_000];
    let mut i_primes: usize = 0;
    let mut last: usize = 0;

    primes[last] = 2;
    let mut s: u32 = 2;
    let mut candidate: u32 = 3;

    loop {
        if is_prime[candidate as usize] {
            i_primes += 1;
            primes[i_primes] = candidate;

            let new_sum = s + candidate;
            if new_sum < 1_000_000 {
                s = new_sum;
                last = i_primes;
            }
        }
        if candidate >= 50_000 {
            break;
        }
        candidate += 2;
    }

    // Walk along the sequence, decreasing sequence length each time you don't find a prime.
    let mut first: usize = 0;
    loop {
        if s < 1_000_000 {
            if is_prime[s as usize] {
                break s;
            } else {
                // slide to the right
                s -= primes[first];
                first += 1;
                last += 1;
                s += primes[last];
            }
        } else {
            // decrease sequence_length
            s -= primes[last];
            last -= 1;

            // carriage return
            while first > 0 {
                s -= primes[last];
                last -= 1;
                first -= 1;
                s += primes[first];
            }
        }
    }
}
